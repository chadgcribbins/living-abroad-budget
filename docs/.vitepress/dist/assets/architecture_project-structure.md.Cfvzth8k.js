import{_ as t,c as a,o as s,ae as o}from"./chunks/framework.Cthp9TdA.js";const h=JSON.parse('{"title":"Project Structure","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/project-structure.md","filePath":"architecture/project-structure.md"}'),r={name:"architecture/project-structure.md"};function i(n,e,c,l,d,p){return s(),a("div",null,e[0]||(e[0]=[o(`<h1 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h1><p>This document outlines the overall structure of the Living Abroad Budget application, explaining the organization principles and key directories.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The application follows a feature-based organization pattern, which groups code by functional features rather than by technical role. This approach provides several benefits:</p><ul><li><strong>Improved discoverability</strong> - Related code is kept together</li><li><strong>Better encapsulation</strong> - Features can be more self-contained</li><li><strong>Easier maintenance</strong> - Changes to one feature are less likely to affect others</li><li><strong>Scalability</strong> - The application can grow by adding new features without refactoring existing code</li></ul><h2 id="directory-structure" tabindex="-1">Directory Structure <a class="header-anchor" href="#directory-structure" aria-label="Permalink to &quot;Directory Structure&quot;">​</a></h2><p>The main source code is located in the <code>src/</code> directory with the following organization:</p><h3 id="core-directories" tabindex="-1">Core Directories <a class="header-anchor" href="#core-directories" aria-label="Permalink to &quot;Core Directories&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Directory</th><th>Purpose</th></tr></thead><tbody><tr><td><code>src/app/</code></td><td>Next.js App Router pages and layouts</td></tr><tr><td><code>src/components/</code></td><td>Shared UI components used across features</td></tr><tr><td><code>src/features/</code></td><td>Feature-based modules (each subdirectory represents a distinct feature)</td></tr><tr><td><code>src/hooks/</code></td><td>Custom React hooks shared across the application</td></tr><tr><td><code>src/services/</code></td><td>External service integrations (APIs, third-party services)</td></tr><tr><td><code>src/store/</code></td><td>Zustand state management (slices, selectors, actions)</td></tr><tr><td><code>src/types/</code></td><td>TypeScript type definitions and interfaces</td></tr><tr><td><code>src/utils/</code></td><td>Utility functions and helper methods</td></tr></tbody></table><h3 id="feature-based-organization" tabindex="-1">Feature-Based Organization <a class="header-anchor" href="#feature-based-organization" aria-label="Permalink to &quot;Feature-Based Organization&quot;">​</a></h3><p>Each feature within the <code>src/features/</code> directory can contain its own:</p><ul><li>Components that are specific to the feature</li><li>Hooks for feature-specific logic</li><li>Utility functions for feature-specific operations</li><li>Types for feature-specific data structures</li></ul><p>Example feature structure:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/features/housing/</span></span>
<span class="line"><span>├── components/        # UI components specific to housing</span></span>
<span class="line"><span>│   ├── HousingForm.tsx</span></span>
<span class="line"><span>│   ├── PropertyComparison.tsx</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>├── hooks/             # Hooks specific to housing</span></span>
<span class="line"><span>│   ├── useHousingCalculations.ts</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>├── utils/             # Utility functions for housing</span></span>
<span class="line"><span>│   ├── mortgageCalculator.ts</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>├── types.ts           # Type definitions specific to housing</span></span>
<span class="line"><span>└── index.ts           # Public API of the housing feature</span></span></code></pre></div><h3 id="app-router-organization" tabindex="-1">App Router Organization <a class="header-anchor" href="#app-router-organization" aria-label="Permalink to &quot;App Router Organization&quot;">​</a></h3><p>The <code>src/app/</code> directory follows Next.js App Router conventions:</p><ul><li>Each route segment is a directory</li><li><code>page.tsx</code> files define routes</li><li><code>layout.tsx</code> files define layouts for routes and their children</li><li><code>loading.tsx</code> files define loading states</li><li><code>error.tsx</code> files define error states</li><li><code>globals.css</code> defines global styles</li></ul><h2 id="styling-approach" tabindex="-1">Styling Approach <a class="header-anchor" href="#styling-approach" aria-label="Permalink to &quot;Styling Approach&quot;">​</a></h2><p>The application uses a combination of:</p><ul><li><strong>TailwindCSS</strong> for utility-first styling</li><li><strong>DaisyUI</strong> for component styling on top of Tailwind</li><li>Custom theme configuration in <code>tailwind.config.ts</code></li></ul><h2 id="state-management" tabindex="-1">State Management <a class="header-anchor" href="#state-management" aria-label="Permalink to &quot;State Management&quot;">​</a></h2><p>State management is handled using Zustand with:</p><ul><li>Modular store slices for different domains</li><li>Persistence middleware for LocalStorage</li><li>Optimized selectors for component rendering</li></ul><h2 id="testing-strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#testing-strategy" aria-label="Permalink to &quot;Testing Strategy&quot;">​</a></h2><p>The testing approach includes:</p><ul><li>Component tests with React Testing Library</li><li>Tests are co-located with their components in <code>__tests__</code> directories</li><li>Jest is configured for running tests</li></ul><h2 id="recommended-development-practices" tabindex="-1">Recommended Development Practices <a class="header-anchor" href="#recommended-development-practices" aria-label="Permalink to &quot;Recommended Development Practices&quot;">​</a></h2><p>When contributing to this project:</p><ol><li><strong>Keep features isolated</strong> - New functionality should be added as a feature in the features directory</li><li><strong>Shared components</strong> - Extract components that will be used across features to the shared components directory</li><li><strong>Type everything</strong> - Use TypeScript types for all code to catch issues early</li><li><strong>Test as you develop</strong> - Write tests alongside your components and features</li><li><strong>Document public APIs</strong> - Document the purpose and usage of components, hooks, and utilities</li></ol>`,29)]))}const g=t(r,[["render",i]]);export{h as __pageData,g as default};
