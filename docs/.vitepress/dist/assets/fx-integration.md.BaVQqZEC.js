import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.Cthp9TdA.js";const d=JSON.parse('{"title":"FX Rate API Integration","description":"","frontmatter":{},"headers":[],"relativePath":"fx-integration.md","filePath":"fx-integration.md"}'),t={name:"fx-integration.md"};function l(h,s,r,p,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="fx-rate-api-integration" tabindex="-1">FX Rate API Integration <a class="header-anchor" href="#fx-rate-api-integration" aria-label="Permalink to &quot;FX Rate API Integration&quot;">​</a></h1><p>This document explains how to set up and use the Foreign Exchange Rate API integration in the Living Abroad Budget application.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The application integrates with OpenExchangeRates to provide real-time currency conversion functionality. This enables users to:</p><ul><li>View exchange rates between different currencies</li><li>Convert monetary values between currencies</li><li>Perform FX sensitivity analysis (by manually adjusting settings and rates)</li><li>Track historical exchange rate trends (via API, though UI for this might be separate)</li></ul><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><h3 id="_1-api-key" tabindex="-1">1. API Key <a class="header-anchor" href="#_1-api-key" aria-label="Permalink to &quot;1. API Key&quot;">​</a></h3><p>Sign up for a free API key at <a href="https://openexchangerates.org/signup/free" target="_blank" rel="noreferrer">OpenExchangeRates</a>.</p><h3 id="_2-environment-variables" tabindex="-1">2. Environment Variables <a class="header-anchor" href="#_2-environment-variables" aria-label="Permalink to &quot;2. Environment Variables&quot;">​</a></h3><p>Create a <code>.env</code> file (or <code>.env.local</code>) in the root of your project with the following variable:</p><div class="language-env vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>OPENEXCHANGERATES_API_KEY=your_api_key_here</span></span></code></pre></div><p><em>(Note: Ensure your Next.js server is restarted after adding/changing this variable.)</em></p><h3 id="_3-development-server" tabindex="-1">3. Development Server <a class="header-anchor" href="#_3-development-server" aria-label="Permalink to &quot;3. Development Server&quot;">​</a></h3><p>Restart your development server to apply the changes if it was running when you modified the <code>.env</code> file.</p><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h2><p>The FX integration is built with the following components:</p><h3 id="_1-fx-service-src-services-fx-ts" tabindex="-1">1. FX Service (<code>src/services/fx.ts</code>) <a class="header-anchor" href="#_1-fx-service-src-services-fx-ts" aria-label="Permalink to &quot;1. FX Service (\`src/services/fx.ts\`)&quot;">​</a></h3><p>Provides utility functions for:</p><ul><li>Fetching exchange rates from OpenExchangeRates via our API routes.</li></ul><h3 id="_2-api-routes" tabindex="-1">2. API Routes <a class="header-anchor" href="#_2-api-routes" aria-label="Permalink to &quot;2. API Routes&quot;">​</a></h3><ul><li><code>/api/fx/latest</code> - Get the latest exchange rates based on a base currency.</li><li><code>/api/fx/historical/[date]</code> - Get historical exchange rates for a specific date (functionality exists in the service, route might be for this).</li></ul><p>These routes act as proxies to the OpenExchangeRates API, handling authentication and data transformation.</p><h3 id="_3-zustand-store-slice-src-store-slices-fxslice-ts" tabindex="-1">3. Zustand Store Slice (<code>src/store/slices/fxSlice.ts</code>) <a class="header-anchor" href="#_3-zustand-store-slice-src-store-slices-fxslice-ts" aria-label="Permalink to &quot;3. Zustand Store Slice (\`src/store/slices/fxSlice.ts\`)&quot;">​</a></h3><p>Manages FX-related state, including:</p><ul><li>Current exchange rates (<code>rates</code>)</li><li>FX settings like base and display currencies, manual rate mode, custom rates, and sensitivity range (<code>settings</code>)</li><li>Loading and error states (<code>isLoading</code>, <code>error</code>)</li><li>Timestamp of the last update (<code>lastUpdated</code>)</li><li>Actions: <code>loadInitialFXData</code>, <code>updateFXSettings</code>, <code>addExchangeRate</code>, <code>updateExchangeRate</code></li><li>Getter/conversion functions: <code>getExchangeRate</code>, <code>convertAmount</code></li></ul><h3 id="_4-react-hook-src-hooks-usefx-ts" tabindex="-1">4. React Hook (<code>src/hooks/useFX.ts</code>) <a class="header-anchor" href="#_4-react-hook-src-hooks-usefx-ts" aria-label="Permalink to &quot;4. React Hook (\`src/hooks/useFX.ts\`)&quot;">​</a></h3><p>A custom hook that provides easy access to FX functionality in React components. It typically exposes:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { baseCurrency, displayCurrency, manualRates, customRates, sensitivityRange }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  rates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  isLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  lastUpdated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  loadInitialFXData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Call this to fetch/refresh rates</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  updateFXSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Used to change base/display currency, enable manual rates, set custom rates etc.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  getExchangeRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gets detailed rate info between two currencies</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  convertAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Directly converts an amount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useFX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="_5-demo-component-src-components-currencyconverter-tsx" tabindex="-1">5. Demo Component (<code>src/components/CurrencyConverter.tsx</code>) <a class="header-anchor" href="#_5-demo-component-src-components-currencyconverter-tsx" aria-label="Permalink to &quot;5. Demo Component (\`src/components/CurrencyConverter.tsx\`)&quot;">​</a></h3><p>A reusable component that demonstrates the FX functionality, including displaying rates and converting amounts.</p><h2 id="usage-examples" tabindex="-1">Usage Examples <a class="header-anchor" href="#usage-examples" aria-label="Permalink to &quot;Usage Examples&quot;">​</a></h2><h3 id="basic-currency-conversion" tabindex="-1">Basic Currency Conversion <a class="header-anchor" href="#basic-currency-conversion" aria-label="Permalink to &quot;Basic Currency Conversion&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useFX } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/hooks/useFX&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CurrencyCode } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/types/base&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatCurrency } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/currency&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assuming a utility for display</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PriceDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fromCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">toCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convertAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useFX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> convertedAmount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> convertAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amount, fromCurrency, toCurrency);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> displayCurrency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings?.displayCurrency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toCurrency;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Original: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formatCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amount, fromCurrency)}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Converted: {convertedAmount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formatCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(convertedAmount, displayCurrency) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;N/A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="refreshing-exchange-rates" tabindex="-1">Refreshing Exchange Rates <a class="header-anchor" href="#refreshing-exchange-rates" aria-label="Permalink to &quot;Refreshing Exchange Rates&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useFX } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/hooks/useFX&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RateRefresher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loadInitialFXData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lastUpdated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useFX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadInitialFXData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{isLoading}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {isLoading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Refreshing...&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Refresh Rates&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {lastUpdated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Last updated: {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastUpdated).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLocaleString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="fx-sensitivity-analysis-manual-rate-adjustment" tabindex="-1">FX Sensitivity Analysis (Manual Rate Adjustment) <a class="header-anchor" href="#fx-sensitivity-analysis-manual-rate-adjustment" aria-label="Permalink to &quot;FX Sensitivity Analysis (Manual Rate Adjustment)&quot;">​</a></h3><p>To perform sensitivity analysis, you would use <code>updateFXSettings</code> to enable <code>manualRates</code> and provide <code>customRates</code>.</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useFX } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/hooks/useFX&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CurrencyCode } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/types/base&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatCurrency } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assuming a utility</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">function SensitivityAnalysis({ amount }) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    convertAmount, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updateFXSettings,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    settings</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } = useFX();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const runAnalysis = async () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const originalSettings = JSON.parse(JSON.stringify(settings)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Deep copy to restore</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Enable manual rates and set a custom rate for analysis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updateFXSettings({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      manualRates: true,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      customRates: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...settings?.customRates, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Preserve other custom rates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${CurrencyCode.USD}-\${CurrencyCode.EUR}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: 0.95, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example: 5% stronger USD for EUR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Allow state to update if updateFXSettings is async or triggers re-renders</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // For simplicity, direct conversion might use the new settings if fxSlice updates synchronously</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // or use a small delay/effect if needed.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Important: convertAmount will now use the custom rate if applicable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const strongerUSDRate = convertAmount(amount, CurrencyCode.USD, CurrencyCode.EUR);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;With 5% stronger USD for EUR:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strongerUSDRate);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updateFXSettings({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      manualRates: true, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Keep manual rates or adjust as needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      customRates: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...settings?.customRates,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${CurrencyCode.USD}-\${CurrencyCode.EUR}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: 0.85, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example: 5% weaker USD for EUR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const weakerUSDRate = convertAmount(amount, CurrencyCode.USD, CurrencyCode.EUR);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;With 5% weaker USD for EUR:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weakerUSDRate);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Reset to original settings after analysis</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // updateFXSettings(originalSettings);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Be careful with full object restore if settings structure is complex</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                        // Prefer restoring specific fields changed for analysis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updateFXSettings({ manualRates: originalSettings.manualRates, customRates: originalSettings.customRates });</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return { strongerUSDRate, weakerUSDRate };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  return (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;button onClick={runAnalysis}&gt;Run EUR/USD Sensitivity Test&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Display results...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="testing-strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#testing-strategy" aria-label="Permalink to &quot;Testing Strategy&quot;">​</a></h2><p>The FX functionality is tested to ensure its reliability:</p><ul><li><strong>Unit Tests for <code>fxSlice.ts</code></strong>: <ul><li>Located in <code>src/store/slices/__tests__/fxSlice.test.ts</code>.</li><li>Utilizes Jest as the testing framework.</li><li><strong>Mocking</strong>: The <code>fetchLatestRates</code> function from <code>src/services/fx.ts</code> is mocked to provide controlled API responses during tests, preventing actual network calls.</li><li><strong>Coverage</strong>: Tests cover: <ul><li>Initial state of the slice.</li><li><code>loadInitialFXData</code> action: for successful API calls, failed API calls, and usage of custom base currency from settings.</li><li><code>updateFXSettings</code> action: ensuring settings are updated correctly and merged with existing ones.</li><li><code>getExchangeRate</code> function: for various scenarios including conversion from/to base currency, cross-currency conversion, same currency conversion, missing rates, and usage of manual/custom rates.</li><li><code>convertAmount</code> function: verifying correct calculation based on <code>getExchangeRate</code> and handling of missing rates.</li></ul></li></ul></li><li><strong>Jest Configuration</strong>: <ul><li><code>jest.config.mjs</code> is configured with <code>moduleNameMapper</code> to correctly resolve path aliases (e.g., <code>@/services/fx</code>) used in imports.</li></ul></li><li><strong>Component Tests</strong>: <ul><li>While <code>TestComponent.test.tsx</code> exists and ensures the general test setup is working, specific component tests for <code>CurrencyConverter.tsx</code> would typically involve: <ul><li>Rendering the component with a mocked <code>useFX</code> hook or within a test <code>StoreProvider</code>.</li><li>Verifying that amounts are displayed and converted correctly based on the mocked FX state.</li><li>Testing user interactions if the component has buttons for refreshing rates, etc.</li></ul></li></ul></li></ul><h2 id="api-rate-limits" tabindex="-1">API Rate Limits <a class="header-anchor" href="#api-rate-limits" aria-label="Permalink to &quot;API Rate Limits&quot;">​</a></h2><p>With the free tier of OpenExchangeRates, there are some limitations:</p><ul><li>1,000 requests per month.</li><li>Base currency locked to USD by their API (our backend API route <code>/api/fx/latest</code> can take a <code>base</code> query parameter, and <code>fxSlice.ts</code> can fetch rates for a non-USD base by passing it to our API route, which then performs necessary calculations if OpenExchangeRates only returns USD-based rates).</li><li>No direct access to their time-series endpoint (we can simulate this by making calls to their historical data endpoint for different dates if needed, managed by our backend).</li></ul><p>For production use with higher volumes, consider upgrading to a paid plan.</p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="common-issues" tabindex="-1">Common Issues <a class="header-anchor" href="#common-issues" aria-label="Permalink to &quot;Common Issues&quot;">​</a></h3><ol><li><p><strong>&quot;Error fetching exchange rates&quot;</strong> or rates not loading:</p><ul><li>Check that your <code>OPENEXCHANGERATES_API_KEY</code> is correctly set in the <code>.env</code> file and that the server was restarted.</li><li>Verify network connectivity.</li><li>Check the OpenExchangeRates dashboard for API usage and potential rate limit issues.</li><li>Ensure the <code>/api/fx/latest</code> route is functioning and can access the API key.</li></ul></li><li><p><strong>Getting stale exchange rates</strong> (during a session):</p><ul><li>The application fetches rates on initial load (e.g., via <code>loadInitialFXData</code> in a top-level component or effect).</li><li>To get the absolute latest rates during a session, <code>loadInitialFXData()</code> can be called again (e.g., via a refresh button).</li><li>Note: The <code>fx</code> slice is currently <em>not</em> persisted to localStorage to avoid issues with stale persisted functions. Settings might be considered for persistence if needed, but rates should generally be fresh.</li></ul></li><li><p><strong>Incorrect conversions between non-USD currencies</strong>:</p><ul><li>Verify that the <code>getExchangeRate</code> logic in <code>fxSlice.ts</code> correctly calculates cross-currency rates (e.g., EUR to GBP via USD).</li><li>Ensure the API route <code>/api/fx/latest</code> correctly handles requests for non-USD base currencies if OpenExchangeRates only provides USD-based data directly.</li></ul></li></ol>`,48)]))}const E=i(t,[["render",l]]);export{d as __pageData,E as default};
