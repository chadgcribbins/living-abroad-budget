import{_ as t,c as o,o as i,ae as r}from"./chunks/framework.Cthp9TdA.js";const h=JSON.parse('{"title":"TypeScript Fixes","description":"","frontmatter":{},"headers":[],"relativePath":"features/typescript/type-fixes.md","filePath":"features/typescript/type-fixes.md"}'),a={name:"features/typescript/type-fixes.md"};function l(s,e,n,p,c,d){return i(),o("div",null,e[0]||(e[0]=[r('<h1 id="typescript-fixes" tabindex="-1">TypeScript Fixes <a class="header-anchor" href="#typescript-fixes" aria-label="Permalink to &quot;TypeScript Fixes&quot;">​</a></h1><p>This document outlines key TypeScript configuration and fixes implemented to ensure type safety across the codebase.</p><h2 id="store-type-fixes" tabindex="-1">Store Type Fixes <a class="header-anchor" href="#store-type-fixes" aria-label="Permalink to &quot;Store Type Fixes&quot;">​</a></h2><h3 id="zustand-store-structure" tabindex="-1">Zustand Store Structure <a class="header-anchor" href="#zustand-store-structure" aria-label="Permalink to &quot;Zustand Store Structure&quot;">​</a></h3><p>We encountered and resolved several typing issues in our Zustand store implementation:</p><ol><li><p><strong>Store Initialization</strong></p><ul><li>Added proper type annotation for the store API parameter</li><li>Used <code>@ts-expect-error</code> with a descriptive comment to address complex store structure typing</li><li>This approach allows us to maintain type safety while acknowledging areas requiring future improvement</li></ul></li><li><p><strong>Persist Middleware</strong></p><ul><li>Fixed the <code>onRehydrateStorage</code> callback signature to match Zustand&#39;s expected pattern</li><li>Updated the <code>StoreInitializer</code> type to use <code>StoreApi&lt;RootState&gt;</code> instead of <code>Record&lt;string, unknown&gt;</code></li><li>Added proper error handling in the hydration callback</li></ul></li><li><p><strong>Profile Slice</strong></p><ul><li>Corrected how the slice accesses the root state structure</li><li>Updated paths to properly use <code>currentState.profile.household</code> instead of direct access</li></ul></li></ol><h2 id="component-type-fixes" tabindex="-1">Component Type Fixes <a class="header-anchor" href="#component-type-fixes" aria-label="Permalink to &quot;Component Type Fixes&quot;">​</a></h2><h3 id="piechart-component" tabindex="-1">PieChart Component <a class="header-anchor" href="#piechart-component" aria-label="Permalink to &quot;PieChart Component&quot;">​</a></h3><ol><li><strong>Recharts Integration</strong><ul><li>Created a proper <code>PieLabel</code> type that supports all Recharts label variations: <ul><li>Boolean flags</li><li>React elements</li><li>Functional components</li><li>Configuration objects</li></ul></li><li>Removed unused imports for cleaner code</li><li>Fixed component props to ensure type safety with Recharts</li></ul></li></ol><h3 id="form-component" tabindex="-1">Form Component <a class="header-anchor" href="#form-component" aria-label="Permalink to &quot;Form Component&quot;">​</a></h3><ol><li><strong>Zod Schema Validation</strong><ul><li>Changed the <code>agreement</code> field validation from <code>z.literal(true)</code> to <code>z.boolean().refine()</code></li><li>This allows the field to properly initialize with <code>false</code> while maintaining validation requirements</li></ul></li></ol><h2 id="best-practices-established" tabindex="-1">Best Practices Established <a class="header-anchor" href="#best-practices-established" aria-label="Permalink to &quot;Best Practices Established&quot;">​</a></h2><ol><li><p><strong>Store Typing</strong></p><ul><li>Use explicit typing for all API parameters</li><li>Add descriptive comments for complex type situations</li></ul></li><li><p><strong>Component Props</strong></p><ul><li>Create explicit types for library integrations</li><li>Use union types for props that accept multiple formats</li></ul></li><li><p><strong>Form Validation</strong></p><ul><li>Use <code>refine()</code> instead of literals for boolean fields that need validation</li><li>Ensure schema supports initialization values and validation requirements</li></ul></li></ol><h2 id="future-improvements" tabindex="-1">Future Improvements <a class="header-anchor" href="#future-improvements" aria-label="Permalink to &quot;Future Improvements&quot;">​</a></h2><ol><li><p><strong>Store Structure</strong></p><ul><li>Refactor store to remove the need for <code>@ts-expect-error</code></li><li>Create proper types for slice creators and actions</li></ul></li><li><p><strong>Component Library</strong></p><ul><li>Create a comprehensive type system for all chart components</li><li>Standardize prop interfaces across related components</li></ul></li></ol><p>These fixes ensure our application builds successfully while maintaining type safety throughout the codebase.</p>',16)]))}const m=t(a,[["render",l]]);export{h as __pageData,m as default};
