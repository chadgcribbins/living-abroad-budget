import{_ as t,c as a,o as i,ae as r}from"./chunks/framework.Cthp9TdA.js";const d=JSON.parse('{"title":"Architecture Overview","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/overview.md","filePath":"architecture/overview.md"}'),o={name:"architecture/overview.md"};function l(n,e,s,c,h,u){return i(),a("div",null,e[0]||(e[0]=[r('<h1 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to &quot;Architecture Overview&quot;">​</a></h1><p>This document provides a high-level overview of the Living Abroad Budget application architecture.</p><h2 id="core-technologies" tabindex="-1">Core Technologies <a class="header-anchor" href="#core-technologies" aria-label="Permalink to &quot;Core Technologies&quot;">​</a></h2><ul><li><strong>Frontend Framework</strong>: Next.js 14 with React</li><li><strong>Styling</strong>: TailwindCSS with DaisyUI components</li><li><strong>State Management</strong>: Zustand with slices and persistent storage</li><li><strong>Type Safety</strong>: TypeScript for all components and state</li><li><strong>API Integration</strong>: Next.js API routes and external API connections</li></ul><h2 id="key-architectural-decisions" tabindex="-1">Key Architectural Decisions <a class="header-anchor" href="#key-architectural-decisions" aria-label="Permalink to &quot;Key Architectural Decisions&quot;">​</a></h2><h3 id="local-first-approach" tabindex="-1">Local-First Approach <a class="header-anchor" href="#local-first-approach" aria-label="Permalink to &quot;Local-First Approach&quot;">​</a></h3><p>The application follows a local-first philosophy:</p><ul><li>Data is stored primarily in the browser using localStorage</li><li>The state is persisted between sessions</li><li>Users can export and import scenarios as JSON files</li><li>Cloud synchronization is optional (future enhancement)</li></ul><h3 id="state-management" tabindex="-1">State Management <a class="header-anchor" href="#state-management" aria-label="Permalink to &quot;State Management&quot;">​</a></h3><p>We use Zustand for state management with a sliced approach:</p><ul><li>Each domain has its own slice (income, housing, education, etc.)</li><li>The store is persisted with middleware</li><li>Careful attention to what gets persisted vs. derived values</li><li>Type-safe actions and state</li></ul><h3 id="component-architecture" tabindex="-1">Component Architecture <a class="header-anchor" href="#component-architecture" aria-label="Permalink to &quot;Component Architecture&quot;">​</a></h3><p>The UI is built with a component-based architecture:</p><ul><li>Shared UI components (buttons, inputs, selectors)</li><li>Domain-specific components</li><li>Layout components for page structure</li><li>Chart components for data visualization</li></ul><h3 id="api-strategy" tabindex="-1">API Strategy <a class="header-anchor" href="#api-strategy" aria-label="Permalink to &quot;API Strategy&quot;">​</a></h3><p>External integrations follow these principles:</p><ul><li>Minimal API dependencies for core functionality</li><li>Rate limiting protection</li><li>Proper error handling and fallbacks</li><li>Cache responses where appropriate</li></ul><h2 id="architectural-diagrams" tabindex="-1">Architectural Diagrams <a class="header-anchor" href="#architectural-diagrams" aria-label="Permalink to &quot;Architectural Diagrams&quot;">​</a></h2><p>Future enhancements to this document will include:</p><ul><li>Data flow diagrams</li><li>Component hierarchy visualization</li><li>State management flow</li></ul><h2 id="future-architecture-evolution" tabindex="-1">Future Architecture Evolution <a class="header-anchor" href="#future-architecture-evolution" aria-label="Permalink to &quot;Future Architecture Evolution&quot;">​</a></h2><p>As the application grows, we plan to:</p><ul><li>Evaluate serverless functions for API routes</li><li>Consider database integration for cloud storage</li><li>Implement authentication and multi-user support</li><li>Enhance offline capabilities</li></ul>',23)]))}const m=t(o,[["render",l]]);export{d as __pageData,m as default};
