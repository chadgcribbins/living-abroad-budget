---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---
- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

- **Workflow Discipline Improvements:**
  - Monitor adherence to the One-Task-at-a-Time workflow
  - Identify patterns where task boundaries are being crossed
  - Look for opportunities to improve the task completion process
  - Update workflow documentation as new best practices emerge
  - Document common pitfalls and how to avoid them

- **Context Management & Error Recovery:**
  - **Monitor Context Availability:**
    - Always verify access to conversation history before attempting summaries
    - Check if previous context is available before referencing past actions
    - Be transparent when context is missing or incomplete
    - When context appears missing despite user having access, request specific relevant messages to rebuild context
    - Document any asymmetry between user-visible and AI-accessible conversation history
  
  - **Error Recovery Protocol:**
    - Immediately acknowledge when context is lost or incomplete
    - Explain the situation clearly to the user
    - Request key messages or summaries from the user when full history isn't accessible
    - Use explicit message sharing to rebuild critical context
    - Document incidents to improve system robustness

  - **Prevention Strategies:**
    - Maintain key context points in task files
    - Use detailed commit messages to track progress
    - Regularly update task status and notes
    - Consider implementing conversation checkpoints

- **Next.js Troubleshooting Patterns:**
  - **Common Setup Issues:**
    - Check for conflicts between Pages Router (/pages) and App Router (/app)
    - Verify Next.js configuration is in JavaScript (next.config.js) for simpler setup
    - Look for multiple running Next.js processes on different ports
    - Check TypeScript configuration in project root
  
  - **404 Error Resolution:**
    - Verify file structure matches Next.js conventions exactly
    - Check for correct use of page.tsx vs index.tsx
    - Ensure proper export of page components
    - Clear .next directory and node_modules for clean rebuild
  
  - **TypeScript Configuration:**
    - Prefer JavaScript configuration files for initial setup
    - Add TypeScript types gradually after basic functionality works
    - Use type assertions (as) instead of satisfies for simpler type checking
    - Keep configuration files minimal during initial setup

  - **Development Process:**
    - Start with minimal working example before adding features
    - Use test pages to verify routing and configuration
    - Kill all Node processes before starting fresh
    - Check for port conflicts and lingering processes
    - Document successful configuration patterns

Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.